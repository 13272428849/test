#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
using namespace std;
typedef pair<int,int> PII;
const int N=300010;
int a[N],s[N];
vector<int> alls;
vector<PII> add,query;

vector<int>:: iterator unique(vector<int> &a)
{
    int j = 0;
    for(int i = 0; i < a.size(); i ++)
        if(!i || a[i] != a[i - 1])
            a[j ++ ] = a[i];
    return a.begin() + j;
}

int find(int x)
{
	int l=0,r=alls.size()-1;
	while(l<r)
	{
		int mid=l+r>>1;
		if(alls[mid]>=x) r=mid;
		else l=mid+1;
	}
	return l+1;//  因为要求前缀和，故下标从1开始方便，不用额外的再处理边界
}
int main(void)
{
	int n,m; cin>>n>>m;
	for(int i=0;i<n;i++)
	{
		int index,x; cin>>index>>x;
		add.push_back({index,x});
		alls.push_back(index);
	}
	
	for(int i=0;i<m;i++)
	{
		int l,r; cin>>l>>r;
		query.push_back({l,r});
		
		alls.push_back(l);
		alls.push_back(r);
	}
	sort(alls.begin(),alls.end());
	alls.erase(unique(alls), alls.end());//去重
	 
	for(int i=0;i<add.size();i++)
	{
		int x=find(add[i].first);
		a[x]+=add[i].second;
	} 
	
	for(int i=1;i<=alls.size();i++) s[i]=s[i-1]+a[i];
	
	for(int i=0;i<query.size();i++)
	{
		int l=find(query[i].first),r=find(query[i].second);
		cout<<s[r]-s[l-1]<<endl;
	}
	return 0;
}

